"""
This class aim to fuse the BrainMVP features with features generated by 2D encoder.
"""
__author__ = 'Jingnan Ma'

import torch
import torch.nn as nn

class FeatureFusionModule(nn.Module):
    def __init__(self,
                 brainmvp_dim,
                 atom_2d_dim,
                 fusion_dim,
                 num_heads=4):
        super().__init__()

        self.brainmvp_proj = nn.Linear(brainmvp_dim, fusion_dim)

        self.fusion_gate = nn.Sequential(
            nn.Linear(fusion_dim + atom_2d_dim, fusion_dim),
            nn.Sigmoid()
        )

        self.fusion_proj = nn.Linear(fusion_dim + atom_2d_dim, fusion_dim)
        self.norm = nn.LayerNorm(fusion_dim)
    
    def forward(self, brainmvp_features, atom_2d_features):
        b, c, d, h, w = brainmvp_features.shape
        brainmvp_features = brainmvp_features.permute(0, 2, 3 ,4, 1).reshape(b, d*h*w, c)

        brainmvp_proj = self.brainmvp_proj(brainmvp_features)

        combined_features = torch.cat([brainmvp_proj, atom_2d_features], dim=-1)
        gate = self.fusion_gate(combined_features)
        fused_features = self.fusion_proj(combined_features)
        fused_features = self.norm(fused_features)
        
        return fused_features